#### OpenSymphony Cache (OSCache) Properties file.


# CACHE OVERFLOW PERSISTENCE
# Use persistent cache in overflow or not. The default value is false, which means
# the persistent cache will be used at all times for every entry.  true is the recommended setting.
#
cache.persistence.overflow.only=true


# CACHE ALGORITHM
#
# Default cache algorithm to use. Note that in order to use an algorithm
# the cache size must also be specified. If the cache size is not specified,
# the cache algorithm will be Unlimited cache.
#
# cache.algorithm=com.opensymphony.oscache.base.algorithm.LRUCache
cache.algorithm=com.opensymphony.oscache.base.algorithm.FIFOCache
# cache.algorithm=com.opensymphony.oscache.base.algorithm.UnlimitedCache


# CACHE SIZE
#
# Default cache size in number of items. If a size is specified but not
# an algorithm, the cache algorithm used will be LRUCache.
#
cache.capacity=50000


# CACHE LISTENERS
#
# These hook OSCache events and perform various actions such as logging
# cache hits and misses, or broadcasting to other cache instances across a cluster.
# See the documentation for further information.
#
# this one is used for JGroups clustering:
<JGROUPS>cache.event.listeners=com.opensymphony.oscache.plugins.clustersupport.JavaGroupsBroadcastingListener

# cache.event.listeners=com.opensymphony.oscache.plugins.clustersupport.JMSBroadcastingListener,  \
#                       com.opensymphony.oscache.extra.CacheEntryEventListenerImpl,               \
#                       com.opensymphony.oscache.extra.CacheMapAccessEventListenerImpl,           \
#                       com.opensymphony.oscache.extra.ScopeEventListenerImpl

# JAVAGROUPS CLUSTER PROPERTIES
#
# Configuration properites for the JavaGroups clustering. Only one of the two below 
# should be specified. See the clustering documentation and the JavaGroups project
# (www.javagroups.com) for more information on these settings. (JChannel)
#
# For clustering to work, you must:
# 1. have jgroups-all.jar + jgroups-concurrent.jar in your classpath
# 2. uncomment the clustersupport.JavaGroupsBroadcastingListener above.
# 3. uncomment the cluster.properties string below. 
#
# notes on the config string:
# No need to specify every single host, only a minimum of one which must be guaranteed to be up.
# num_initial_members can be 1 or higher. You may use IP addresses or DNS names for hostnames.
# if you specify a port_range, each additional host+port combo will be automatically added to initial_hosts, so you don't need to list each one.
# It's perfectly fine to run a bunch of instances on the same host: just include the one hostname.
# start_port and end_port specify the range of ports that TCP will try to bind to when starting up.
# This config was based on one found here: http://wiki.jboss.org/wiki/Wiki.jsp?page=JGroupsStackTCP
# The best reference guide for jgroups config is here: http://wiki.jboss.org/wiki/Wiki.jsp?page=JGroups
<JGROUPS>cache.cluster.properties=TCP(start_port=7800;end_port=7830;loopback=true):\
<JGROUPS>TCPPING(initial_hosts=<JGROUPS_INITIAL_HOSTS>;\
<JGROUPS>timeout=5000;num_initial_members=1;up_thread=true;down_thread=true):\
<JGROUPS>FD(shun=true;timeout=15000;max_tries=5;up_thread=true;down_thread=true):\
<JGROUPS>VERIFY_SUSPECT(timeout=2000;down_thread=false;up_thread=false):\
<JGROUPS>pbcast.NAKACK(down_thread=true;up_thread=true;gc_lag=100;retransmit_timeout=3000):\
<JGROUPS>pbcast.STABLE(desired_avg_gossip=20000;stability_delay=1500;down_thread=false;up_thread=false):\
<JGROUPS>pbcast.GMS(join_timeout=5000;join_retry_timeout=2000;shun=false;print_local_addr=true;down_thread=true;up_thread=true)


############ PROPERTIES WE ARE NOT CONSIDERING NOW #############

# CACHE IN MEMORY
#
# If you want to disable memory caching, just uncomment this line.
#
# cache.memory=false


# CACHE KEY
#
# This is the key that will be used to store the cache in the application
# and session scope.
#
# If you want to set the cache key to anything other than the default
# uncomment this line and change the cache.key
#
# cache.key=__oscache_cache


# USE HOST DOMAIN NAME IN KEY
#
# Servers for multiple host domains may wish to add host name info to
# the generation of the key.  If this is true, then uncomment the
# following line.
#
# cache.use.host.domain.in.key=true


# CACHE PERSISTENCE CLASS
#
# Specify the class to use for persistence. If you use the supplied DiskPersistenceListener,
# don't forget to supply the cache.path property to specify the location of the cache
# directory.
# 
# If a persistence class is not specified, OSCache will use memory caching only.
#
# cache.persistence.class=com.opensymphony.oscache.plugins.diskpersistence.DiskPersistenceListener


# CACHE DIRECTORY
#
# This is the directory on disk where caches will be stored by the DiskPersistenceListener.
# it will be created if it doesn't already exist. Remember that OSCache must have
# write permission to this directory.
#
# Note: for Windows machines, this needs \ to be escaped
# ie Windows:
# cache.path=c:\\myapp\\cache
# or *ix:
# cache.path=/opt/myapp/cache
#
# cache.path=c:\\app\\cache


# THREAD BLOCKING BEHAVIOR
#
# When a request is made for a stale cache entry, it is possible that another thread is already
# in the process of rebuilding that entry. This setting specifies how OSCache handles the
# subsequent 'non-building' threads. The default behaviour (cache.blocking=false) is to serve
# the old content to subsequent threads until the cache entry has been updated. This provides
# the best performance (at the cost of serving slightly stale data). When blocking is enabled,
# threads will instead block until the new cache entry is ready to be served. Once the new entry
# is put in the cache the blocked threads will be restarted and given the new entry.
# Note that even if blocking is disabled, when there is no stale data available to be served
# threads will block until the data is added to the cache by the thread that is responsible
# for building the data.
#
# cache.blocking=false


# CACHE UNLIMITED DISK
# Use unlimited disk cache or not. The default value is false, which means
# the disk cache will be limited in size to the value specified by cache.capacity.
#
# cache.unlimited.disk=false
